#ifndef PRECOMPUTED_H
#define PRECOMPUTED_H

#include "definitions.h"


namespace chess
{
namespace precomputed
{
using namespace def;

constexpr std::array<Bitboard, 64> bb_squares =
{
    Bitboard(1) << A1,
    Bitboard(1) << B1,
    Bitboard(1) << C1,
    Bitboard(1) << D1,
    Bitboard(1) << E1,
    Bitboard(1) << F1,
    Bitboard(1) << G1,
    Bitboard(1) << H1,

    Bitboard(1) << A2,
    Bitboard(1) << B2,
    Bitboard(1) << C2,
    Bitboard(1) << D2,
    Bitboard(1) << E2,
    Bitboard(1) << F2,
    Bitboard(1) << G2,
    Bitboard(1) << H2,

    Bitboard(1) << A3,
    Bitboard(1) << B3,
    Bitboard(1) << C3,
    Bitboard(1) << D3,
    Bitboard(1) << E3,
    Bitboard(1) << F3,
    Bitboard(1) << G3,
    Bitboard(1) << H3,

    Bitboard(1) << A4,
    Bitboard(1) << B4,
    Bitboard(1) << C4,
    Bitboard(1) << D4,
    Bitboard(1) << E4,
    Bitboard(1) << F4,
    Bitboard(1) << G4,
    Bitboard(1) << H4,

    Bitboard(1) << A5,
    Bitboard(1) << B5,
    Bitboard(1) << C5,
    Bitboard(1) << D5,
    Bitboard(1) << E5,
    Bitboard(1) << F5,
    Bitboard(1) << G5,
    Bitboard(1) << H5,

    Bitboard(1) << A6,
    Bitboard(1) << B6,
    Bitboard(1) << C6,
    Bitboard(1) << D6,
    Bitboard(1) << E6,
    Bitboard(1) << F6,
    Bitboard(1) << G6,
    Bitboard(1) << H6,

    Bitboard(1) << A7,
    Bitboard(1) << B7,
    Bitboard(1) << C7,
    Bitboard(1) << D7,
    Bitboard(1) << E7,
    Bitboard(1) << F7,
    Bitboard(1) << G7,
    Bitboard(1) << H7,

    Bitboard(1) << A8,
    Bitboard(1) << B8,
    Bitboard(1) << C8,
    Bitboard(1) << D8,
    Bitboard(1) << E8,
    Bitboard(1) << F8,
    Bitboard(1) << G8,
    Bitboard(1) << H8
};

constexpr Bitboard bb_corners = bb_squares[A1] | bb_squares[A8] | bb_squares[H1] | bb_squares[H8];
constexpr Bitboard bb_center = bb_squares[D4] | bb_squares[E4] | bb_squares[D5] | bb_squares[E5];

constexpr Bitboard bb_light_squares = 0x55aa55aa55aa55aa;
constexpr Bitboard bb_dark_squares = 0xaa55aa55aa55aa55;

constexpr Bitboard bb_empty = 0x0;
constexpr Bitboard bb_full = 0xffffffffffffffff;

constexpr std::array<Bitboard, 8> bb_files =
{
    0x101010101010101,
    0x202020202020202,
    0x404040404040404,
    0x808080808080808,
    0x1010101010101010,
    0x2020202020202020,
    0x4040404040404040,
    0x8080808080808080
};

constexpr std::array<Bitboard, 8> bb_ranks =
{
    0x00000000000000ff,
    0x000000000000ff00,
    0x0000000000ff0000,
    0x00000000ff000000,
    0x000000ff00000000,
    0x0000ff0000000000,
    0x00ff000000000000,
    0xff00000000000000
};

constexpr Bitboard bb_backranks = bb_ranks[0] | bb_ranks[7];

// diagonals with default 7+rank-file numbering
constexpr std::array<Bitboard, 15> bb_diagonals =
{
    0x80,
    0x8040,
    0x804020,
    0x80402010,
    0x8040201008,
    0x804020100804,
    0x80402010080402,
    0x8040201008040201,
    0x4020100804020100,
    0x2010080402010000,
    0x1008040201000000,
    0x804020100000000,
    0x402010000000000,
    0x201000000000000,
    0x100000000000000
};

// diagonals with alternative (rank-file)&15 numbering
constexpr std::array<Bitboard, 16> bb_diagonals_alt =
{
    0x80,
    0x4020100804020100,
    0x2010080402010000,
    0x1008040201000000,
    0x804020100000000,
    0x402010000000000,
    0x201000000000000,
    0x100000000000000,
    0x0, // 8 is a nexus thus it's skipped
    0x80,
    0x8040,
    0x804020,
    0x80402010,
    0x8040201008,
    0x804020100804,
    0x80402010080402
};

// antidiagonals with default rank+file ordering
constexpr std::array<Bitboard, 15> bb_antidiagonals =
{
    0x1,
    0x102,
    0x10204,
    0x1020408,
    0x102040810,
    0x10204081020,
    0x1020408102040,
    0x102040810204080,
    0x204081020408000,
    0x408102040800000,
    0x810204080000000,
    0x1020408000000000,
    0x2040800000000000,
    0x4080000000000000,
    0x8000000000000000
};

// antidiagonals with alternative (rank+file)^7 numbering
constexpr std::array<Bitboard, 16> bb_antidiagonals_alt =
{
    0x102040810204080,
    0x1020408102040,
    0x10204081020,
    0x102040810,
    0x1020408,
    0x10204,
    0x102,
    0x1,
    0x0, // 8 is a nexus number
    0x8000000000000000,
    0x4080000000000000,
    0x2040800000000000,
    0x1020408000000000,
    0x810204080000000,
    0x408102040800000,
    0x204081020408000
};

constexpr std::array<Bitboard, 64> bb_white_pawn_pseudolegal_moves =
{
    768ULL,
    1792ULL,
    3584ULL,
    7168ULL,
    14336ULL,
    28672ULL,
    57344ULL,
    49152ULL,

    16973824ULL,
    34013184ULL,
    68026368ULL,
    136052736ULL,
    272105472ULL,
    544210944ULL,
    1088421888ULL,
    2160066560ULL,

    50331648ULL,
    117440512ULL,
    234881024ULL,
    469762048ULL,
    939524096ULL,
    1879048192ULL,
    3758096384ULL,
    3221225472ULL,

    12884901888ULL,
    30064771072ULL,
    60129542144ULL,
    120259084288ULL,
    240518168576ULL,
    481036337152ULL,
    962072674304ULL,
    824633720832ULL,

    3298534883328ULL,
    7696581394432ULL,
    15393162788864ULL,
    30786325577728ULL,
    61572651155456ULL,
    123145302310912ULL,
    246290604621824ULL,
    211106232532992ULL,

    844424930131968ULL,
    1970324836974592ULL,
    3940649673949184ULL,
    7881299347898368ULL,
    15762598695796736ULL,
    31525197391593472ULL,
    63050394783186944ULL,
    54043195528445952ULL,

    216172782113783808ULL,
    504403158265495552ULL,
    1008806316530991104ULL,
    2017612633061982208ULL,
    4035225266123964416ULL,
    8070450532247928832ULL,
    16140901064495857664ULL,
    13835058055282163712ULL,

    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
};

constexpr std::array<Bitboard, 64> bb_black_pawn_pseudolegal_moves =
{
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,

    3ULL,
    7ULL,
    14ULL,
    28ULL,
    56ULL,
    112ULL,
    224ULL,
    192ULL,

    768ULL,
    1792ULL,
    3584ULL,
    7168ULL,
    14336ULL,
    28672ULL,
    57344ULL,
    49152ULL,

    196608ULL,
    458752ULL,
    917504ULL,
    1835008ULL,
    3670016ULL,
    7340032ULL,
    14680064ULL,
    12582912ULL,

    50331648ULL,
    117440512ULL,
    234881024ULL,
    469762048ULL,
    939524096ULL,
    1879048192ULL,
    3758096384ULL,
    3221225472ULL,

    12884901888ULL,
    30064771072ULL,
    60129542144ULL,
    120259084288ULL,
    240518168576ULL,
    481036337152ULL,
    962072674304ULL,
    824633720832ULL,

    3302829850624ULL,
    7705171329024ULL,
    15410342658048ULL,
    30820685316096ULL,
    61641370632192ULL,
    123282741264384ULL,
    246565482528768ULL,
    211655988346880ULL,

    844424930131968ULL,
    1970324836974592ULL,
    3940649673949184ULL,
    7881299347898368ULL,
    15762598695796736ULL,
    31525197391593472ULL,
    63050394783186944ULL,
    54043195528445952ULL
};

constexpr std::array<Bitboard, 64> bb_knight_pseudolegal_moves =
{
    306948462103135296ULL,
    613896924206270592ULL,
    1227793848412541184ULL,
    2455587696825082368ULL,
    4911175393650164736ULL,
    9822350787300329472ULL,
    1197957500891107329ULL,
    2395915001782214658ULL,

    4791830003564429316ULL,
    9583660007128858632ULL,
    720575940548165649ULL,
    1441151881096331298ULL,
    2882303762192662596ULL,
    5764607524385325192ULL,
    11529215048770650384ULL,
    4611686023831749153ULL,

    9223372047663498306ULL,
    21617444997ULL,
    43234889994ULL,
    86469779988ULL,
    172939559976ULL,
    345879119952ULL,
    691758239904ULL,
    1383516479808ULL,

    2767032959616ULL,
    5534065919232ULL,
    11068131838464ULL,
    22136263676928ULL,
    44272527353856ULL,
    88545054707712ULL,
    177090109415424ULL,
    354180218830848ULL,

    708360437661696ULL,
    1416720875323392ULL,
    2833441750646784ULL,
    5666883501293568ULL,
    11333767002587136ULL,
    22667534005174272ULL,
    45335068010348544ULL,
    90670136020697088ULL,

    181340272041394176ULL,
    362680544082788352ULL,
    725361088165576704ULL,
    1450722176331153408ULL,
    2901444352662306816ULL,
    5802888705324613632ULL,
    11605777410649227264ULL,
    4764810747588902913ULL,

    9529621495177805826ULL,
    612498916646060037ULL,
    1224997833292120074ULL,
    2449995666584240148ULL,
    4899991333168480296ULL,
    9799982666336960592ULL,
    1153221258964369569ULL,
    2306442517928739138ULL,

    4612885035857478276ULL,
    9225770071714956552ULL,
    4796069720361489ULL,
    9592139440722978ULL,
    19184278881445956ULL,
    38368557762891912ULL,
    76737115525783824ULL,
    153474231051567648ULL,
};

constexpr std::array<Bitboard, 64> bb_bishop_pseudolegal_moves =
{
    9241421688590303744ULL,
    36099303471056128ULL,
    141012904249856ULL,
    550848566272ULL,
    6480472064ULL,
    1108177604608ULL,
    283691315142656ULL,
    72624976668147712ULL,

    4620710844295151618ULL,
    9241421688590368773ULL,
    36099303487963146ULL,
    141017232965652ULL,
    1659000848424ULL,
    283693466779728ULL,
    72624976676520096ULL,
    145249953336262720ULL,

    2310355422147510788ULL,
    4620710844311799048ULL,
    9241421692918565393ULL,
    36100411639206946ULL,
    424704217196612ULL,
    72625527495610504ULL,
    145249955479592976ULL,
    290499906664153120ULL,

    1155177711057110024ULL,
    2310355426409252880ULL,
    4620711952330133792ULL,
    9241705379636978241ULL,
    108724279602332802ULL,
    145390965166737412ULL,
    290500455356698632ULL,
    580999811184992272ULL,

    577588851267340304ULL,
    1155178802063085600ULL,
    2310639079102947392ULL,
    4693335752243822976ULL,
    9386671504487645697ULL,
    326598935265674242ULL,
    581140276476643332ULL,
    1161999073681608712ULL,

    288793334762704928ULL,
    577868148797087808ULL,
    1227793891648880768ULL,
    2455587783297826816ULL,
    4911175566595588352ULL,
    9822351133174399489ULL,
    1197958188344280066ULL,
    2323857683139004420ULL,

    144117404414255168ULL,
    360293502378066048ULL,
    720587009051099136ULL,
    1441174018118909952ULL,
    2882348036221108224ULL,
    5764696068147249408ULL,
    11529391036782871041ULL,
    4611756524879479810ULL,

    567382630219904ULL,
    1416240237150208ULL,
    2833579985862656ULL,
    5667164249915392ULL,
    11334324221640704ULL,
    22667548931719168ULL,
    45053622886727936ULL,
    18049651735527937ULL,
};

constexpr std::array<Bitboard, 64> bb_rook_pseudolegal_moves =
{
    72340172838076926ULL,
    144680345676153597ULL,
    289360691352306939ULL,
    578721382704613623ULL,
    1157442765409226991ULL,
    2314885530818453727ULL,
    4629771061636907199ULL,
    9259542123273814143ULL,

    72340172838141441ULL,
    144680345676217602ULL,
    289360691352369924ULL,
    578721382704674568ULL,
    1157442765409283856ULL,
    2314885530818502432ULL,
    4629771061636939584ULL,
    9259542123273813888ULL,

    72340172854657281ULL,
    144680345692602882ULL,
    289360691368494084ULL,
    578721382720276488ULL,
    1157442765423841296ULL,
    2314885530830970912ULL,
    4629771061645230144ULL,
    9259542123273748608ULL,

    72340177082712321ULL,
    144680349887234562ULL,
    289360695496279044ULL,
    578721386714368008ULL,
    1157442769150545936ULL,
    2314885534022901792ULL,
    4629771063767613504ULL,
    9259542123257036928ULL,

    72341259464802561ULL,
    144681423712944642ULL,
    289361752209228804ULL,
    578722409201797128ULL,
    1157443723186933776ULL,
    2314886351157207072ULL,
    4629771607097753664ULL,
    9259542118978846848ULL,

    72618349279904001ULL,
    144956323094725122ULL,
    289632270724367364ULL,
    578984165983651848ULL,
    1157687956502220816ULL,
    2315095537539358752ULL,
    4629910699613634624ULL,
    9259541023762186368ULL,

    143553341945872641ULL,
    215330564830528002ULL,
    358885010599838724ULL,
    645993902138460168ULL,
    1220211685215703056ULL,
    2368647251370188832ULL,
    4665518383679160384ULL,
    9259260648297103488ULL,

    18302911464433844481ULL,
    18231136449196065282ULL,
    18087586418720506884ULL,
    17800486357769390088ULL,
    17226286235867156496ULL,
    16077885992062689312ULL,
    13781085504453754944ULL,
    9187484529235886208ULL,
};

constexpr std::array<Bitboard, 64> bb_queen_pseudolegal_moves =
{
    9313761861428380670ULL,
    180779649147209725ULL,
    289501704256556795ULL,
    578721933553179895ULL,
    1157442771889699055ULL,
    2314886638996058335ULL,
    4630054752952049855ULL,
    9332167099941961855ULL,

    4693051017133293059ULL,
    9386102034266586375ULL,
    325459994840333070ULL,
    578862399937640220ULL,
    1157444424410132280ULL,
    2315169224285282160ULL,
    4702396038313459680ULL,
    9404792076610076608ULL,

    2382695595002168069ULL,
    4765391190004401930ULL,
    9530782384287059477ULL,
    614821794359483434ULL,
    1157867469641037908ULL,
    2387511058326581416ULL,
    4775021017124823120ULL,
    9550042029937901728ULL,

    1227517888139822345ULL,
    2455035776296487442ULL,
    4910072647826412836ULL,
    9820426766351346249ULL,
    1266167048752878738ULL,
    2460276499189639204ULL,
    4920271519124312136ULL,
    9840541934442029200ULL,

    649930110732142865ULL,
    1299860225776030242ULL,
    2600000831312176196ULL,
    5272058161445620104ULL,
    10544115227674579473ULL,
    2641485286422881314ULL,
    5210911883574396996ULL,
    10421541192660455560ULL,

    361411684042608929ULL,
    722824471891812930ULL,
    1517426162373248132ULL,
    3034571949281478664ULL,
    6068863523097809168ULL,
    12137446670713758241ULL,
    5827868887957914690ULL,
    11583398706901190788ULL,

    287670746360127809ULL,
    575624067208594050ULL,
    1079472019650937860ULL,
    2087167920257370120ULL,
    4102559721436811280ULL,
    8133343319517438240ULL,
    16194909420462031425ULL,
    13871017173176583298ULL,

    18303478847064064385ULL,
    18232552689433215490ULL,
    18090419998706369540ULL,
    17806153522019305480ULL,
    17237620560088797200ULL,
    16100553540994408480ULL,
    13826139127340482880ULL,
    9205534180971414145ULL,
};

constexpr std::array<Bitboard, 64> bb_white_king_pseudolegal_moves =
{
    770ULL,
    1797ULL,
    3594ULL,
    7188ULL,
    14444ULL,
    28752ULL,
    57504ULL,
    49216ULL,

    197123ULL,
    460039ULL,
    920078ULL,
    1840156ULL,
    3680312ULL,
    7360624ULL,
    14721248ULL,
    12599488ULL,

    50463488ULL,
    117769984ULL,
    235539968ULL,
    471079936ULL,
    942159872ULL,
    1884319744ULL,
    3768639488ULL,
    3225468928ULL,

    12918652928ULL,
    30149115904ULL,
    60298231808ULL,
    120596463616ULL,
    241192927232ULL,
    482385854464ULL,
    964771708928ULL,
    825720045568ULL,

    3307175149568ULL,
    7718173671424ULL,
    15436347342848ULL,
    30872694685696ULL,
    61745389371392ULL,
    123490778742784ULL,
    246981557485568ULL,
    211384331665408ULL,

    846636838289408ULL,
    1975852459884544ULL,
    3951704919769088ULL,
    7903409839538176ULL,
    15806819679076352ULL,
    31613639358152704ULL,
    63227278716305408ULL,
    54114388906344448ULL,

    216739030602088448ULL,
    505818229730443264ULL,
    1011636459460886528ULL,
    2023272918921773056ULL,
    4046545837843546112ULL,
    8093091675687092224ULL,
    16186183351374184448ULL,
    13853283560024178688ULL,

    144959613005987840ULL,
    362258295026614272ULL,
    724516590053228544ULL,
    1449033180106457088ULL,
    2898066360212914176ULL,
    5796132720425828352ULL,
    11592265440851656704ULL,
    4665729213955833856ULL,
};

constexpr std::array<Bitboard, 64> bb_black_king_pseudolegal_moves =
{
    770ULL,
    1797ULL,
    3594ULL,
    7188ULL,
    14376ULL,
    28752ULL,
    57504ULL,
    49216ULL,

    197123ULL,
    460039ULL,
    920078ULL,
    1840156ULL,
    3680312ULL,
    7360624ULL,
    14721248ULL,
    12599488ULL,

    50463488ULL,
    117769984ULL,
    235539968ULL,
    471079936ULL,
    942159872ULL,
    1884319744ULL,
    3768639488ULL,
    3225468928ULL,

    12918652928ULL,
    30149115904ULL,
    60298231808ULL,
    120596463616ULL,
    241192927232ULL,
    482385854464ULL,
    964771708928ULL,
    825720045568ULL,

    3307175149568ULL,
    7718173671424ULL,
    15436347342848ULL,
    30872694685696ULL,
    61745389371392ULL,
    123490778742784ULL,
    246981557485568ULL,
    211384331665408ULL,

    846636838289408ULL,
    1975852459884544ULL,
    3951704919769088ULL,
    7903409839538176ULL,
    15806819679076352ULL,
    31613639358152704ULL,
    63227278716305408ULL,
    54114388906344448ULL,

    216739030602088448ULL,
    505818229730443264ULL,
    1011636459460886528ULL,
    2023272918921773056ULL,
    4046545837843546112ULL,
    8093091675687092224ULL,
    16186183351374184448ULL,
    13853283560024178688ULL,

    144959613005987840ULL,
    362258295026614272ULL,
    724516590053228544ULL,
    1449033180106457088ULL,
    7797982754792013824ULL,
    5796132720425828352ULL,
    11592265440851656704ULL,
    4665729213955833856ULL
};

constexpr std::array<std::array<Bitboard, 64>, 7> bb_white_pseudolegal_moves =
{
    bb_white_pawn_pseudolegal_moves,
    bb_knight_pseudolegal_moves,
    bb_bishop_pseudolegal_moves,
    bb_rook_pseudolegal_moves,
    bb_queen_pseudolegal_moves,
    bb_white_king_pseudolegal_moves,
    std::array<Bitboard,64>{0x0ULL}
};

constexpr std::array<std::array<Bitboard, 64>, 7> bb_black_pseudolegal_moves =
{
    bb_black_pawn_pseudolegal_moves,
    bb_knight_pseudolegal_moves,
    bb_bishop_pseudolegal_moves,
    bb_rook_pseudolegal_moves,
    bb_queen_pseudolegal_moves,
    bb_black_king_pseudolegal_moves,
    std::array<Bitboard,64>{0x0ULL}
};

constexpr std::array<std::array<std::array<Bitboard, 64>, 7>,2> bb_pseudolegal_moves =
{
    bb_black_pseudolegal_moves,
    bb_white_pseudolegal_moves
};

constexpr std::array<Bitboard, 64> bb_white_pawn_pseudolegal_attacks =
{
    512ULL,
    1280ULL,
    2560ULL,
    5120ULL,
    10240ULL,
    20480ULL,
    40960ULL,
    16384ULL,

    131072ULL,
    327680ULL,
    655360ULL,
    1310720ULL,
    2621440ULL,
    5242880ULL,
    10485760ULL,
    4194304ULL,

    33554432ULL,
    83886080ULL,
    167772160ULL,
    335544320ULL,
    671088640ULL,
    1342177280ULL,
    2684354560ULL,
    1073741824ULL,

    8589934592ULL,
    21474836480ULL,
    42949672960ULL,
    85899345920ULL,
    171798691840ULL,
    343597383680ULL,
    687194767360ULL,
    274877906944ULL,

    2199023255552ULL,
    5497558138880ULL,
    10995116277760ULL,
    21990232555520ULL,
    43980465111040ULL,
    87960930222080ULL,
    175921860444160ULL,
    70368744177664ULL,

    562949953421312ULL,
    1407374883553280ULL,
    2814749767106560ULL,
    5629499534213120ULL,
    11258999068426240ULL,
    22517998136852480ULL,
    45035996273704960ULL,
    18014398509481984ULL,

    144115188075855872ULL,
    360287970189639680ULL,
    720575940379279360ULL,
    1441151880758558720ULL,
    2882303761517117440ULL,
    5764607523034234880ULL,
    11529215046068469760ULL,
    4611686018427387904ULL,

    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL
};

constexpr std::array<Bitboard, 64> bb_black_pawn_pseudolegal_attacks =
{
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,
    0ULL,

    2ULL,
    5ULL,
    10ULL,
    20ULL,
    40ULL,
    80ULL,
    160ULL,
    64ULL,

    512ULL,
    1280ULL,
    2560ULL,
    5120ULL,
    10240ULL,
    20480ULL,
    40960ULL,
    16384ULL,

    131072ULL,
    327680ULL,
    655360ULL,
    1310720ULL,
    2621440ULL,
    5242880ULL,
    10485760ULL,
    4194304ULL,

    33554432ULL,
    83886080ULL,
    167772160ULL,
    335544320ULL,
    671088640ULL,
    1342177280ULL,
    2684354560ULL,
    1073741824ULL,

    8589934592ULL,
    21474836480ULL,
    42949672960ULL,
    85899345920ULL,
    171798691840ULL,
    343597383680ULL,
    687194767360ULL,
    274877906944ULL,

    2199023255552ULL,
    5497558138880ULL,
    10995116277760ULL,
    21990232555520ULL,
    43980465111040ULL,
    87960930222080ULL,
    175921860444160ULL,
    70368744177664ULL,

    562949953421312ULL,
    1407374883553280ULL,
    2814749767106560ULL,
    5629499534213120ULL,
    11258999068426240ULL,
    22517998136852480ULL,
    45035996273704960ULL,
    18014398509481984ULL,
};

constexpr std::array<Bitboard, 64> bb_king_pseudolegal_attacks =
{
    770ULL,
    1797ULL,
    3594ULL,
    7188ULL,
    14376ULL,
    28752ULL,
    57504ULL,
    49216ULL,

    197123ULL,
    460039ULL,
    920078ULL,
    1840156ULL,
    3680312ULL,
    7360624ULL,
    14721248ULL,
    12599488ULL,

    50463488ULL,
    117769984ULL,
    235539968ULL,
    471079936ULL,
    942159872ULL,
    1884319744ULL,
    3768639488ULL,
    3225468928ULL,

    12918652928ULL,
    30149115904ULL,
    60298231808ULL,
    120596463616ULL,
    241192927232ULL,
    482385854464ULL,
    964771708928ULL,
    825720045568ULL,

    3307175149568ULL,
    7718173671424ULL,
    15436347342848ULL,
    30872694685696ULL,
    61745389371392ULL,
    123490778742784ULL,
    246981557485568ULL,
    211384331665408ULL,

    846636838289408ULL,
    1975852459884544ULL,
    3951704919769088ULL,
    7903409839538176ULL,
    15806819679076352ULL,
    31613639358152704ULL,
    63227278716305408ULL,
    54114388906344448ULL,

    216739030602088448ULL,
    505818229730443264ULL,
    1011636459460886528ULL,
    2023272918921773056ULL,
    4046545837843546112ULL,
    8093091675687092224ULL,
    16186183351374184448ULL,
    13853283560024178688ULL,

    144959613005987840ULL,
    362258295026614272ULL,
    724516590053228544ULL,
    1449033180106457088ULL,
    2898066360212914176ULL,
    5796132720425828352ULL,
    11592265440851656704ULL,
    4665729213955833856ULL,
};

constexpr std::array<std::array<Bitboard, 64>, 7> bb_white_pseudolegal_attacks =
{
    bb_white_pawn_pseudolegal_attacks,
    bb_knight_pseudolegal_moves,
    bb_bishop_pseudolegal_moves,
    bb_rook_pseudolegal_moves,
    bb_queen_pseudolegal_moves,
    bb_king_pseudolegal_attacks,
    std::array<Bitboard,64>{0x0ULL}
};

constexpr std::array<std::array<Bitboard, 64>, 7> bb_black_pseudolegal_attacks =
{
    bb_black_pawn_pseudolegal_attacks,
    bb_knight_pseudolegal_moves,
    bb_bishop_pseudolegal_moves,
    bb_rook_pseudolegal_moves,
    bb_queen_pseudolegal_moves,
    bb_king_pseudolegal_attacks,
    std::array<Bitboard,64>{0x0ULL}
};

constexpr std::array<std::array<std::array<Bitboard, 64>, 7>,2> bb_pseudolegal_attacks =
{
    bb_black_pseudolegal_attacks,
    bb_white_pseudolegal_attacks
};

constexpr std::array<Bitboard, 64> bb_positive_horizontal_rays
{

};

constexpr std::array<Bitboard, 64> bb_negative_horizontal_rays
{

};

constexpr std::array<Bitboard, 64> bb_positive_vertical_rays
{

};

constexpr std::array<Bitboard, 64> bb_negative_vertical_rays
{

};

constexpr std::array<Bitboard, 64> bb_positive_diagonal_rays
{

};

constexpr std::array<Bitboard, 64> bb_negative_diagonal_rays
{

};

constexpr std::array<Bitboard, 64> bb_positive_antidiagonal_rays
{

};

constexpr std::array<Bitboard, 64> bb_negative_antidiagonal_rays
{

};

} // namespace precomputed
} // namespace chess
#endif // PRECOMPUTED_H
